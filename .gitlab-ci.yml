# Example  .gitlab-ci.yml file
stages:
  - maventry
  - maventest
  - androidbuild
  - androidtest
  - mavenDeploy

before_script:
  - export JAVA_HOME="/"

maven-build: #this is a JOB
  stage: maventry
  tags:
    - springboot_tag # this is LINK to the shell runner on the remote-server

  script:
    - cd Backend/backend/ #change directory to where you have your springboot application
    - mvn clean package

maven-test:
  stage: maventest
  tags:
    - springboot_tag
  script:
    - cd Backend/backend/
    - mvn test
  artifacts:
    paths:
      - Backend/target/*.jar

# Roy's
android-build: #this is another job
  image: gjandres/android-ci:latest # this is a directive to DOCKER
  stage: androidbuild
  tags:
    - AndroidStudio_Test_Tag #this is LINK to the docker runner on the remote-server
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod +x ./Frontend/Frontend/gradlew #change directory to where you have ‘gradlew’ in your android directory
  script:
    - cd Frontend/Frontend #change directory to where you have your android application
    - ./gradlew assemble
  artifacts:
    paths:
      - Frontend/Frontend/app/build/outputs/

android-test: #this is another job
  image: gjandres/android-ci:latest # this is a directive to DOCKER
  stage: androidtest
  tags:
    - AndroidStudio_Test_Tag #this is LINK to the docker runner on the remote-server
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod +x ./Frontend/Frontend/gradlew #change directory to where you have ‘gradlew’ in your android directory
  script:
    - cd Frontend/Frontend #change directory to where you have your android application
    - ./gradlew test

# Below job builds, deploys, executes jar as service.
autoDeploy:
  stage: mavenDeploy #do make a stage with same name!
  tags:
    - springboot_tag
  script:
    - cd Backend/backend
    - mvn package
    - sudo mv target/*.jar /target/backend-0.0.1.jar
    - sudo systemctl stop system-web-demo
    - sudo systemctl start system-web-demo
